const { cmd, commands } = require('../command');
const config = require('../config');
const os = require('os');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, fetchJson , runtime ,sleep } = require('../DATABASE/functions')
const { checkAccess, isPremiumUser, blacklistedJIDs, premiumJIDs, dataLoaded } = require('../DATABASE/accessControl');
const mono = "```"

    function detectPlatform() {
      if (process.env.REPL_ID) return 'Replit';
      if (process.env.HEROKU_APP_NAME) return 'Heroku';
      if (process.env.KOYEB_PROJECT_ID) return 'Koyeb';
      if (process.env.AWS_LAMBDA_FUNCTION_NAME) return 'AWS Lambda';
      if (process.env.VERCEL) return 'Vercel';
      if (process.env.RENDER) return 'Render';
      if (process.env.NETLIFY) return 'Netlify';
      if (process.env.WORKFLOW) return 'Workflow';
      if (process.env.FLYIO_APP_NAME) return 'Fly.io';
      return 'Unknown Platform';
    }
    const platformName = detectPlatform();

    cmd({
      pattern: "system",
      alias: ["status", "botinfo"],
      desc: "Check uptime, RAM usage, CPU info, and more",
      category: "main",
      react: "üß¨",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent
        
          
          let desc = `*‰πÇ SAHAS-MD SYSTEM INFORMATION*

*‚è∞ ùñ¥ùóâùóçùóÇùóÜùñæ :* ${uptime}
*üìª ùñØùóÖùñ∫ùóçùñøùóàùóãùóÜ :* ${platformName}
*‚öôÔ∏è ùñ±ùñ∫ùóÜ ùñ¥ùóåùñ∫ùóÄùñæ :* ${memoryUsage} MB / ${totalMemory} MB
*üë®‚Äçüíª Owner :* Sahas Tech 
*ü§ñ Version :* 1.0.0
‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé
> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`

       

          

          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `SAHAS-MD System Information`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://files.catbox.moe/de82e3.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: false
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


















cmd({
      pattern: "alive",
      alias: ["online"],
      desc: "Chek Bot Alive",
      category: "main",
      react: "üßöüèª‚Äç‚ôÄÔ∏è",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `üëã `Hello ${pushname}`

ùñ≥ùóíùóâùñæ .ùóÜùñæùóáùóé ùñ¶ùñæùóç ùñ¨ùóí ùñ¢ùóàùóÜùóÜùñ∫ùóáùñΩ ùñ´ùóÇùóåùóç. ùòöùòàùòèùòàùòö ùñ¨ùñ£ ùóÇùóå ùñ∫ ùñ≤ùóÇùóÜùóâùóÖùóí ùñµùñæùóãùóí ùñØùóàùóêùñæùóãùñøùóéùóÖùóÖ ùñ∂ùóÅùóçùóåùñ∫ùóâùóâ ùñ°ùóàùóç. ùñ°ùñ∫ùóåùñæ ùñ±ùóéùóáùóÇùóáùóÄ ùñÆùóá ùñ°ùñ∫ùóÖùóÇùñæùóíùóå ùñ†ùóáùñΩ ùñµùñ∫ùóãùóÇùóàùóéùóå ùñ†ùñØùñ®ùóå. ùñ®ùóç ùñÆùñøùñøùñæùóã  ùñ≤ùñæùñ∫ùóÜùóÖùñæùóåùóå ùñ•ùóéùóáùñºùóçùóÇùóàùóáùñ∫ùóÖùóÇùóçùóí ùñ∂ùóÇùóçùóÅùóàùóéùóç ùñ°ùóéùóçùóçùóàùóáùóå. ùñ£ùñæùóÖùóÇùóèùñæùóãùóÇùóáùóÄ ùñ∞ùóéùóÇùñºùóÑ ùñ†ùóáùñΩ ùñ§ùñøùñøùóÇùñºùóÇùñæùóáùóç ùñØùñæùóãùñøùóàùóãùóÜùñ∫ùóáùñºùñæ ùñ•ùóàùóã ùñ†ùóéùóçùóàùóÜùñ∫ùóçùñæùñΩ ùñ≥ùñ∫ùóåùóÑùóå ùñ†ùóáùñΩ ùñ¢ùóàùóÜùóÜùñ∫ùóáùñΩùóå. ùñ≠ùóàùóê ùñ∏ùóàùóé ùñ¢ùñ∫ùóá ùñ¶ùñæùóç ùñ¨ùóí ùñ≤ùóíùóåùóçùñæùóÜ ùñ®ùóáùñøùóàùóãùóÜùñ∫ùóçùóÇùóàùóá ùñ≥ùóíùóâùñæ .ùóåùóíùóåùóçùñæùóÜ ùñ†ùóáùñΩ ùñ≤ùñæùóáùñΩ ùñ®ùóç. 

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `I'm Alive Now üë®‚Äçüíª`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://files.catbox.moe/de82e3.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: false
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });

















cmd({
      pattern: "menu",
      alias: ["panel"],
      desc: "Get Bot Menu",
      category: "main",
      react: "üìÅ",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*This is SAHAS-MD Version 1.0.0 Menu is Not Updated.*
          
*ùòäùòñùòîùòîùòêùòïùòé ùòöùòñùòñùòï...üíó

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥  |   ùöÉùô¥ùô≤ùô∑ „Ç∏',
          newsletterJid: "120363296605464049@newsletter",
          },
          externalAdReply: {
              title: `SAHAS-MD Menu List`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://files.catbox.moe/de82e3.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: false
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });
